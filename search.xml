<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSql</title>
      <link href="/2022/08/26/MYSql/"/>
      <url>/2022/08/26/MYSql/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库密码：root"><a href="#数据库密码：root" class="headerlink" title="数据库密码：root"></a>数据库密码：root</h1><h1 id="服务器的启动和停止"><a href="#服务器的启动和停止" class="headerlink" title="服务器的启动和停止"></a>服务器的启动和停止</h1><ol><li><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80</span><br></pre></td></tr></table></figure></li><li><h6 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure></li></ol><h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1><h2 id="方式一：使用MySQL提供的客户端命令行工具"><a href="#方式一：使用MySQL提供的客户端命令行工具" class="headerlink" title="方式一：使用MySQL提供的客户端命令行工具"></a>方式一：使用MySQL提供的客户端命令行工具</h2><p><img src="/.io//Blog/source/_posts/MYSql/1%20(1).png" alt="img"></p><h2 id="方式二：使用系统自带的命令行工具执行指令"><a href="#方式二：使用系统自带的命令行工具执行指令" class="headerlink" title="方式二：使用系统自带的命令行工具执行指令"></a>方式二：使用系统自带的命令行工具执行指令</h2><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232171.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br></pre></td></tr></table></figure><p> 参数： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h : MySQL服务所在的主机IP</span><br><span class="line"></span><br><span class="line">​-P : MySQL服务端口号， 默认3306 </span><br><span class="line"></span><br><span class="line">​-u : MySQL数据库用户名 </span><br><span class="line"></span><br><span class="line">​-p ： MySQL数据库用户名对应的密码</span><br></pre></td></tr></table></figure><p>[]内为可选参数，如果需要连接远程的MySQL，需要加上这两个参数来指定远程主机IP、端口，如果 连接本地的MySQL，则无需指定这两个参数。</p><p>注意： 使用这种方式进行连接时，需要安装完毕后配置PATH环境变量。</p><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="1-关系型数据库（RDBMS）"><a href="#1-关系型数据库（RDBMS）" class="headerlink" title="1. 关系型数据库（RDBMS）"></a>1. 关系型数据库（RDBMS）</h2><p>​概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。 而所谓二维表，指的是由行和列组成的表。我们之前提到的MySQL、Oracle、DB2、 SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p><p>特点： A. 使用表存储数据，格式统一，便于维护。</p><p>​ B. 使用SQL语言操作，标准统一，使用方便。</p><h2 id="2-数据模型"><a href="#2-数据模型" class="headerlink" title="2. 数据模型"></a>2. 数据模型</h2><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232108.png"></p><ul><li>我们可以通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库。 </li><li>可以使用SQL语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</li><li>一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包 含多行记录。</li></ul><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>全称 Structured Query Language，结构化查询语言。操作关系型数据库的编程语言，定义了 一套操作关系型数据库统一标准 。</p><h2 id="2-1-SQL通用语法"><a href="#2-1-SQL通用语法" class="headerlink" title="2.1 SQL通用语法"></a>2.1 SQL通用语法</h2><p>在学习具体的SQL语句之前，先来了解一下SQL语言的同于语法。</p><h3 id="1-SQL语句可以单行或多行书写，以分号结尾。"><a href="#1-SQL语句可以单行或多行书写，以分号结尾。" class="headerlink" title="1). SQL语句可以单行或多行书写，以分号结尾。"></a>1). SQL语句可以单行或多行书写，以分号结尾。</h3><h3 id="2-SQL语句可以使用空格-x2F-缩进来增强语句的可读性。"><a href="#2-SQL语句可以使用空格-x2F-缩进来增强语句的可读性。" class="headerlink" title="2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。"></a>2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</h3><h3 id="3-MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。"><a href="#3-MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。" class="headerlink" title="3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。"></a>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</h3><h3 id="4-注释："><a href="#4-注释：" class="headerlink" title="4). 注释："></a>4). 注释：</h3><p> 单行注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- 注释内容 或 # 注释内容</span><br></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* 注释内容 */</span><br></pre></td></tr></table></figure><h2 id="2-2-SQL分类"><a href="#2-2-SQL分类" class="headerlink" title="2.2 SQL分类"></a>2.2 SQL分类</h2><p>SQL语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL。</p><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232796.png"></p><h2 id="2-3-DDL"><a href="#2-3-DDL" class="headerlink" title="2.3 DDL"></a>2.3 DDL</h2><p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p><h3 id="2-3-1-数据库操作"><a href="#2-3-1-数据库操作" class="headerlink" title="2.3.1 数据库操作"></a>2.3.1 数据库操作</h3><h4 id="1-查询所有数据库"><a href="#1-查询所有数据库" class="headerlink" title="1). 查询所有数据库"></a>1). 查询所有数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h4 id="2-查询当前数据库"><a href="#2-查询当前数据库" class="headerlink" title="2). 查询当前数据库"></a>2). 查询当前数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><h4 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3). 创建数据库"></a>3). 创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序 规则 ];</span><br></pre></td></tr></table></figure><h5 id="案例：-A-创建一个itcast数据库-使用数据库默认的字符集。"><a href="#案例：-A-创建一个itcast数据库-使用数据库默认的字符集。" class="headerlink" title="案例： A. 创建一个itcast数据库, 使用数据库默认的字符集。"></a>案例： A. 创建一个itcast数据库, 使用数据库默认的字符集。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database itcast;</span><br></pre></td></tr></table></figure><p>在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。</p><p>可以通过if not exists 参数来解决这个问题，数据库不存在, 则创建该数据库，如果存在，则不创建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database if not extists itcast;</span><br></pre></td></tr></table></figure><h5 id="B-创建一个itheima数据库，并且指定字符集"><a href="#B-创建一个itheima数据库，并且指定字符集" class="headerlink" title="B. 创建一个itheima数据库，并且指定字符集"></a>B. 创建一个itheima数据库，并且指定字符集</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database itheima default charset utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="4-删除数据库"><a href="#4-删除数据库" class="headerlink" title="4). 删除数据库"></a>4). 删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure><p>如果删除一个不存在的数据库，将会报错。此时，可以加上参数 if exists ，如果数据库存在，再 执行删除，否则不执行删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists test;</span><br></pre></td></tr></table></figure><h4 id="5-切换数据库"><a href="#5-切换数据库" class="headerlink" title="5). 切换数据库"></a>5). 切换数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名 ;</span><br></pre></td></tr></table></figure><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则是不能操作的。 比如，切换到itcast数据，执行如下SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use itcast;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-表操作"><a href="#2-3-2-表操作" class="headerlink" title="2.3.2 表操作"></a>2.3.2 表操作</h3><h4 id="2-3-2-1-表操作-查询创建"><a href="#2-3-2-1-表操作-查询创建" class="headerlink" title="2.3.2.1 表操作-查询创建"></a>2.3.2.1 表操作-查询创建</h4><h5 id="1-查询当前数据库所有表"><a href="#1-查询当前数据库所有表" class="headerlink" title="1). 查询当前数据库所有表"></a>1). 查询当前数据库所有表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>比如,我们可以切换到sys这个系统数据库,并查看系统数据库中的所有表结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use sys;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="2-查看指定表结构"><a href="#2-查看指定表结构" class="headerlink" title="2). 查看指定表结构"></a>2). 查看指定表结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名 ;</span><br></pre></td></tr></table></figure><p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p><h5 id="3-查询指定表的建表语句"><a href="#3-查询指定表的建表语句" class="headerlink" title="3). 查询指定表的建表语句"></a>3). 查询指定表的建表语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名 ;</span><br></pre></td></tr></table></figure><p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p><h5 id="4-创建表结构"><a href="#4-创建表结构" class="headerlink" title="4). 创建表结构"></a>4). 创建表结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名( </span><br><span class="line">字段1 字段1类型 [ COMMENT 字段1注释 ], </span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释 ], </span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释 ], </span><br><span class="line">...... </span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ] </span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure><p>[^注意]:  […] 内为可选参数，最后一个字段后面没有逗号</p><p>比如，我们创建一张表 tb_user ，对应的结构如下，那么建表语句为：</p><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232475.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table tb_user(</span><br><span class="line">id int comment &#x27;编号&#x27;,</span><br><span class="line">name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">age int comment &#x27;年龄&#x27;,</span><br><span class="line">gender varchar(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-表操作-数据类型"><a href="#2-3-2-2-表操作-数据类型" class="headerlink" title="2.3.2.2 表操作-数据类型"></a>2.3.2.2 表操作-数据类型</h4><p>在上述的建表语句中，我们在指定字段的数据类型时，用到了int ，varchar，那么在MySQL中除了 以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><h5 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1). 数值类型"></a>1). 数值类型</h5><table><thead><tr><th>分类</th><th>类型</th><th align="left">大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td></td><td>TINYINT</td><td align="left">1 byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td></td><td>SMALLINT</td><td align="left">2  bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td></td><td>MEDIUMINT</td><td align="left">3  bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td></td><td>INT或INTEGER</td><td align="left">4  bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td></td><td>BIGINT</td><td align="left">8  bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td></td><td>FLOAT</td><td align="left">4  bytes</td><td>(-3.402823466 E+38，3.402823466351  E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td></td><td>DOUBLE</td><td align="left">8  bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td></td><td>DECIMAL</td><td align="left"></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr><tr><td></td><td></td><td align="left"></td><td></td><td></td><td></td></tr></tbody></table><p>例如：123.45，精度就是5，标度就是小数点后面的两位数，这里标度是2.</p><table><thead><tr><th>age  TINYINT UNSIGNED</th><th>加UNSIGNED就是使用无符号的</th></tr></thead></table><p>如: 1). 年龄字段 – 不会出现负数, 而且人的年龄不会太大 age tinyint unsigned </p><p>​  2). 分数 – 总分100分, 最多出现一位小数 score double(4,1)</p><h5 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2). 字符串类型"></a>2). 字符串类型</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/26/%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/26/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库密码：root"><a href="#数据库密码：root" class="headerlink" title="数据库密码：root"></a>数据库密码：root</h1><h1 id="服务器的启动和停止"><a href="#服务器的启动和停止" class="headerlink" title="服务器的启动和停止"></a>服务器的启动和停止</h1><ol><li><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80</span><br></pre></td></tr></table></figure></li><li><h6 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure></li></ol><h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1><h2 id="方式一：使用MySQL提供的客户端命令行工具"><a href="#方式一：使用MySQL提供的客户端命令行工具" class="headerlink" title="方式一：使用MySQL提供的客户端命令行工具"></a>方式一：使用MySQL提供的客户端命令行工具</h2><p><img src="/.io//Blog/source/_posts/%E7%AC%94%E8%AE%B0/image-20220731000303087.png"></p><h2 id="方式二：使用系统自带的命令行工具执行指令"><a href="#方式二：使用系统自带的命令行工具执行指令" class="headerlink" title="方式二：使用系统自带的命令行工具执行指令"></a>方式二：使用系统自带的命令行工具执行指令</h2><p><a href="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232171.png">https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232171.png</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br></pre></td></tr></table></figure><p> 参数： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h : MySQL服务所在的主机IP</span><br><span class="line"></span><br><span class="line">​-P : MySQL服务端口号， 默认3306 </span><br><span class="line"></span><br><span class="line">​-u : MySQL数据库用户名 </span><br><span class="line"></span><br><span class="line">​-p ： MySQL数据库用户名对应的密码</span><br></pre></td></tr></table></figure><p>[]内为可选参数，如果需要连接远程的MySQL，需要加上这两个参数来指定远程主机IP、端口，如果 连接本地的MySQL，则无需指定这两个参数。</p><p>注意： 使用这种方式进行连接时，需要安装完毕后配置PATH环境变量。</p><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="1-关系型数据库（RDBMS）"><a href="#1-关系型数据库（RDBMS）" class="headerlink" title="1. 关系型数据库（RDBMS）"></a>1. 关系型数据库（RDBMS）</h2><p>​概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。 而所谓二维表，指的是由行和列组成的表。我们之前提到的MySQL、Oracle、DB2、 SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p><p>特点： A. 使用表存储数据，格式统一，便于维护。</p><p>​ B. 使用SQL语言操作，标准统一，使用方便。</p><h2 id="2-数据模型"><a href="#2-数据模型" class="headerlink" title="2. 数据模型"></a>2. 数据模型</h2><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232108.png"></p><ul><li>我们可以通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库。 </li><li>可以使用SQL语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</li><li>一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包 含多行记录。</li></ul><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>全称 Structured Query Language，结构化查询语言。操作关系型数据库的编程语言，定义了 一套操作关系型数据库统一标准 。</p><h2 id="2-1-SQL通用语法"><a href="#2-1-SQL通用语法" class="headerlink" title="2.1 SQL通用语法"></a>2.1 SQL通用语法</h2><p>在学习具体的SQL语句之前，先来了解一下SQL语言的同于语法。</p><h3 id="1-SQL语句可以单行或多行书写，以分号结尾。"><a href="#1-SQL语句可以单行或多行书写，以分号结尾。" class="headerlink" title="1). SQL语句可以单行或多行书写，以分号结尾。"></a>1). SQL语句可以单行或多行书写，以分号结尾。</h3><h3 id="2-SQL语句可以使用空格-x2F-缩进来增强语句的可读性。"><a href="#2-SQL语句可以使用空格-x2F-缩进来增强语句的可读性。" class="headerlink" title="2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。"></a>2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</h3><h3 id="3-MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。"><a href="#3-MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。" class="headerlink" title="3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。"></a>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</h3><h3 id="4-注释："><a href="#4-注释：" class="headerlink" title="4). 注释："></a>4). 注释：</h3><p> 单行注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- 注释内容 或 # 注释内容</span><br></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* 注释内容 */</span><br></pre></td></tr></table></figure><h2 id="2-2-SQL分类"><a href="#2-2-SQL分类" class="headerlink" title="2.2 SQL分类"></a>2.2 SQL分类</h2><p>SQL语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL。</p><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232796.png"></p><h2 id="2-3-DDL"><a href="#2-3-DDL" class="headerlink" title="2.3 DDL"></a>2.3 DDL</h2><p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p><h3 id="2-3-1-数据库操作"><a href="#2-3-1-数据库操作" class="headerlink" title="2.3.1 数据库操作"></a>2.3.1 数据库操作</h3><h4 id="1-查询所有数据库"><a href="#1-查询所有数据库" class="headerlink" title="1). 查询所有数据库"></a>1). 查询所有数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h4 id="2-查询当前数据库"><a href="#2-查询当前数据库" class="headerlink" title="2). 查询当前数据库"></a>2). 查询当前数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><h4 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3). 创建数据库"></a>3). 创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序 规则 ];</span><br></pre></td></tr></table></figure><h5 id="案例：-A-创建一个itcast数据库-使用数据库默认的字符集。"><a href="#案例：-A-创建一个itcast数据库-使用数据库默认的字符集。" class="headerlink" title="案例： A. 创建一个itcast数据库, 使用数据库默认的字符集。"></a>案例： A. 创建一个itcast数据库, 使用数据库默认的字符集。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database itcast;</span><br></pre></td></tr></table></figure><p>在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。</p><p>可以通过if not exists 参数来解决这个问题，数据库不存在, 则创建该数据库，如果存在，则不创建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database if not extists itcast;</span><br></pre></td></tr></table></figure><h5 id="B-创建一个itheima数据库，并且指定字符集"><a href="#B-创建一个itheima数据库，并且指定字符集" class="headerlink" title="B. 创建一个itheima数据库，并且指定字符集"></a>B. 创建一个itheima数据库，并且指定字符集</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database itheima default charset utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="4-删除数据库"><a href="#4-删除数据库" class="headerlink" title="4). 删除数据库"></a>4). 删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure><p>如果删除一个不存在的数据库，将会报错。此时，可以加上参数 if exists ，如果数据库存在，再 执行删除，否则不执行删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists test;</span><br></pre></td></tr></table></figure><h4 id="5-切换数据库"><a href="#5-切换数据库" class="headerlink" title="5). 切换数据库"></a>5). 切换数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名 ;</span><br></pre></td></tr></table></figure><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则是不能操作的。 比如，切换到itcast数据，执行如下SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use itcast;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-表操作"><a href="#2-3-2-表操作" class="headerlink" title="2.3.2 表操作"></a>2.3.2 表操作</h3><h4 id="2-3-2-1-表操作-查询创建"><a href="#2-3-2-1-表操作-查询创建" class="headerlink" title="2.3.2.1 表操作-查询创建"></a>2.3.2.1 表操作-查询创建</h4><h5 id="1-查询当前数据库所有表"><a href="#1-查询当前数据库所有表" class="headerlink" title="1). 查询当前数据库所有表"></a>1). 查询当前数据库所有表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>比如,我们可以切换到sys这个系统数据库,并查看系统数据库中的所有表结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use sys;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="2-查看指定表结构"><a href="#2-查看指定表结构" class="headerlink" title="2). 查看指定表结构"></a>2). 查看指定表结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名 ;</span><br></pre></td></tr></table></figure><p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p><h5 id="3-查询指定表的建表语句"><a href="#3-查询指定表的建表语句" class="headerlink" title="3). 查询指定表的建表语句"></a>3). 查询指定表的建表语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名 ;</span><br></pre></td></tr></table></figure><p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p><h5 id="4-创建表结构"><a href="#4-创建表结构" class="headerlink" title="4). 创建表结构"></a>4). 创建表结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名( </span><br><span class="line">字段1 字段1类型 [ COMMENT 字段1注释 ], </span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释 ], </span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释 ], </span><br><span class="line">...... </span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ] </span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure><p>[^注意]:  […] 内为可选参数，最后一个字段后面没有逗号</p><p>比如，我们创建一张表 tb_user ，对应的结构如下，那么建表语句为：</p><p><img src="https://gitee.com/myindata/my_picgodemo_image/raw/main/img/202208262232475.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table tb_user(</span><br><span class="line">id int comment &#x27;编号&#x27;,</span><br><span class="line">name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">age int comment &#x27;年龄&#x27;,</span><br><span class="line">gender varchar(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-表操作-数据类型"><a href="#2-3-2-2-表操作-数据类型" class="headerlink" title="2.3.2.2 表操作-数据类型"></a>2.3.2.2 表操作-数据类型</h4><p>在上述的建表语句中，我们在指定字段的数据类型时，用到了int ，varchar，那么在MySQL中除了 以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><h5 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1). 数值类型"></a>1). 数值类型</h5><table><thead><tr><th>分类</th><th>类型</th><th align="left">大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td></td><td>TINYINT</td><td align="left">1 byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td></td><td>SMALLINT</td><td align="left">2  bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td></td><td>MEDIUMINT</td><td align="left">3  bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td></td><td>INT或INTEGER</td><td align="left">4  bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td></td><td>BIGINT</td><td align="left">8  bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td></td><td>FLOAT</td><td align="left">4  bytes</td><td>(-3.402823466 E+38，3.402823466351  E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td></td><td>DOUBLE</td><td align="left">8  bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td></td><td>DECIMAL</td><td align="left"></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr><tr><td></td><td></td><td align="left"></td><td></td><td></td><td></td></tr></tbody></table><p>例如：123.45，精度就是5，标度就是小数点后面的两位数，这里标度是2.</p><table><thead><tr><th>age  TINYINT UNSIGNED</th><th>加UNSIGNED就是使用无符号的</th></tr></thead></table><p>如: 1). 年龄字段 – 不会出现负数, 而且人的年龄不会太大 age tinyint unsigned </p><p>​  2). 分数 – 总分100分, 最多出现一位小数 score double(4,1)</p><h5 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2). 字符串类型"></a>2). 字符串类型</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试代码2</title>
      <link href="/2022/08/24/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%812/"/>
      <url>/2022/08/24/%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%812/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn500&quot;</span>&gt;</span>点击夏雨荷到500<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn800&quot;</span>&gt;</span>点击夏雨荷到800<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>夏雨荷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 缓动动画函数封装obj目标对象 target 目标位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 让盒子每次移动的距离慢慢变小， 速度就会慢慢落下来。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 核心算法：(目标值 - 现在的位置) / 10 做为每次移动的距离 步长</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 停止的条件是： 让当前盒子位置等于目标位置就停止定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 步长值写到定时器的里面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 把我们步长值改为整数 不要出现小数的问题</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">            step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 停止动画 本质是停止定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">15</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn500 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn500&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn800 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn800&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn500.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(span, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    btn800.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animate</span>(span, <span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 匀速动画 就是 盒子是当前的位置 +  固定的值 10</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 缓动动画就是  盒子当前的位置 + 变化的值(目标值 - 现在的位置) / 10）</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/08/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2022/08/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 我的第一个文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/08/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A02/"/>
      <url>/2022/08/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A02/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn500&quot;</span>&gt;</span>点击夏雨荷到500<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn800&quot;</span>&gt;</span>点击夏雨荷到800<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>夏雨荷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 缓动动画函数封装obj目标对象 target 目标位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 让盒子每次移动的距离慢慢变小， 速度就会慢慢落下来。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 核心算法：(目标值 - 现在的位置) / 10 做为每次移动的距离 步长</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 停止的条件是： 让当前盒子位置等于目标位置就停止定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 步长值写到定时器的里面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 把我们步长值改为整数 不要出现小数的问题</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">            step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 停止动画 本质是停止定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">15</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn500 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn500&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn800 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn800&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn500.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(span, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    btn800.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animate</span>(span, <span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 匀速动画 就是 盒子是当前的位置 +  固定的值 10</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 缓动动画就是  盒子当前的位置 + 变化的值(目标值 - 现在的位置) / 10）</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的第一个文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/23/hello-world/"/>
      <url>/2022/08/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
